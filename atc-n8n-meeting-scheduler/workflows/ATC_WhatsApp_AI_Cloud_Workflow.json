{
  "name": "ATC WhatsApp AI Cloud - Interest-Based Data Collection",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-inbound",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-1000, 200],
      "id": "whatsapp-inbound-webhook",
      "name": "WhatsApp Inbound Webhook",
      "webhookId": "atc-whatsapp-ai-cloud",
      "credentials": {
        "httpHeaderAuth": {
          "id": "webhook-auth-header",
          "name": "ATC Webhook Auth"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 1000
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [-1000, 400],
      "id": "daily-outreach-trigger",
      "name": "Daily Outreach (9am IST)"
    },
    {
      "parameters": {
        "jsCode": "// Parse WhatsApp inbound message with interest detection\nconst webhookData = $input.all()[0]?.json?.body;\n\nif (!webhookData) {\n  throw new Error('No webhook data received');\n}\n\n// Parse AiSensy message format\nconst parsedMessage = {\n  messageId: webhookData.messageId || webhookData.id,\n  from: webhookData.from || webhookData.sender,\n  to: webhookData.to || webhookData.recipient,\n  message: webhookData.message || webhookData.text,\n  messageType: webhookData.type || 'text',\n  timestamp: webhookData.timestamp || new Date().toISOString(),\n  provider: 'aisensy'\n};\n\n// Normalize phone to E.164\nfunction normalizePhone(phone) {\n  if (!phone) return null;\n  const cleaned = phone.replace(/[^\\d+]/g, '');\n  if (cleaned.startsWith('+91') && cleaned.length === 13) return cleaned;\n  if (cleaned.startsWith('91') && cleaned.length === 12) return '+' + cleaned;\n  if (cleaned.length === 10 && /^[6-9]\\d{9}$/.test(cleaned)) return '+91' + cleaned;\n  return phone;\n}\n\n// Extract lead data with interest detection\nfunction analyzeMessage(message) {\n  const lower = message.toLowerCase();\n  let interestScore = 0;\n  const extracted = { name: null, email: null, interests: [], hasTypo: false };\n  \n  // Name extraction\n  const nameMatch = message.match(/(?:my name is|i am|i'm|call me)\\s+([a-zA-Z\\s]{2,30})/i);\n  if (nameMatch) extracted.name = nameMatch[1].trim();\n  \n  // Email extraction with typo detection\n  const emailMatch = message.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);  \n  if (emailMatch) {\n    extracted.email = emailMatch[1].toLowerCase();\n    // Check for common typos\n    if (extracted.email.includes('@gmial.com')) {\n      extracted.hasTypo = true;\n      extracted.suggestedEmail = extracted.email.replace('@gmial.com', '@gmail.com');\n    }\n  }\n  \n  // Aviation interest detection\n  const aviationKeywords = ['cpl', 'ppl', 'atpl', 'pilot', 'aviation', 'flying', 'aircraft', 'training'];\n  aviationKeywords.forEach(keyword => {\n    if (lower.includes(keyword)) {\n      extracted.interests.push(keyword.toUpperCase());\n      interestScore += 20;\n    }\n  });\n  \n  // Question indicators (high interest)\n  if (message.includes('?') || /\\b(what|how|when|where|why|cost|price|fee|duration|time)\\b/i.test(message)) {\n    interestScore += 30;\n  }\n  \n  // Engagement keywords\n  const engagementWords = ['interested', 'want to know', 'tell me more', 'details'];\n  if (engagementWords.some(word => lower.includes(word))) {\n    interestScore += 25;\n  }\n  \n  return { ...extracted, interestScore, isInterested: interestScore >= 40 };\n}\n\nconst phone = normalizePhone(parsedMessage.from);\nconst analysis = analyzeMessage(parsedMessage.message);\n\nif (!phone || !parsedMessage.message) {\n  throw new Error('Invalid message format');\n}\n\nreturn {\n  phone,\n  message: parsedMessage.message,\n  ...analysis,\n  timestamp: new Date().toISOString(),\n  messageType: 'inbound'\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-800, 200],
      "id": "parse-inbound-message",
      "name": "Parse Inbound Message"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "={{ $vars.AIRTABLE_BASE_ID }}",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "={{ $vars.AIRTABLE_LEADS_TABLE_ID }}",
          "mode": "id"
        },
        "filterByFormula": "=AND({DataCompleteness} < 100, OR({WhatsAppSentAt} = BLANK(), {WhatsAppSentAt} = ''))",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [-800, 400],
      "id": "get-incomplete-leads",
      "name": "Get Incomplete Leads",
      "credentials": {
        "airtableTokenApi": {
          "id": "airtable-token",
          "name": "ATC Airtable Token"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "={{ $vars.AIRTABLE_BASE_ID }}",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "={{ $vars.AIRTABLE_LEADS_TABLE_ID }}",
          "mode": "id"
        },
        "filterByFormula": "={Phone} = \"{{ $json.phone }}\"",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [-600, 200],
      "id": "find-existing-lead",
      "name": "Find Existing Lead",
      "credentials": {
        "airtableTokenApi": {
          "id": "airtable-token",
          "name": "ATC Airtable Token"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "lead-exists",
              "leftValue": "={{ $('Find Existing Lead').item.json.length }}",
              "rightValue": "0",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-400, 200],
      "id": "check-lead-exists",
      "name": "Check Lead Exists"
    },
    {
      "parameters": {
        "jsCode": "// Send initial WhatsApp messages to incomplete leads\nconst incompleteLeads = $input.all()[0]?.json || [];\n\nif (!Array.isArray(incompleteLeads) || incompleteLeads.length === 0) {\n  return { outreachResults: [], message: 'No incomplete leads found' };\n}\n\n// Initial aviation training message\nconst getInitialMessage = (leadName) => {\n  const firstName = leadName && leadName.trim() ? leadName.split(' ')[0] : 'there';\n  return `Hello ${firstName}! 👋\\n\\nWelcome to Aviators Training Centre - India's premier aviation training institute! ✈️\\n\\nWe help aspiring pilots achieve their dreams through comprehensive programs:\\n\\n🎯 CPL (Commercial Pilot License)\\n🎯 PPL (Private Pilot License)\\n🎯 ATPL (Airline Transport Pilot License)\\n🎯 IR (Instrument Rating)\\n🎯 Ground School & Theory\\n\\nAre you interested in starting your aviation career? What type of pilot training interests you most?`;\n};\n\n// Mock outreach for development (replace with actual AiSensy API)\nconst outreachResults = incompleteLeads.slice(0, 10).map(lead => ({\n  leadId: lead.id,\n  leadName: lead.fields.Name || 'Unknown',\n  leadPhone: lead.fields.Phone,\n  dataCompleteness: lead.fields.DataCompleteness || 33,\n  success: true,\n  messageId: 'mock_' + Date.now(),\n  timestamp: new Date().toISOString()\n}));\n\nreturn {\n  outreachResults,\n  outreachSummary: {\n    totalSent: outreachResults.length,\n    totalFailed: 0,\n    totalAttempted: incompleteLeads.length,\n    timestamp: new Date().toISOString()\n  },\n  messageType: 'outbound'\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-600, 400],
      "id": "send-initial-outreach",
      "name": "Send Initial Outreach"
    },
    {
      "parameters": {
        "jsCode": "// Interest-based conversation analysis and data enrichment\nconst messageData = $('Parse Inbound Message').first().json;\nconst existingLead = $('Find Existing Lead').first().json[0];\n\nif (!existingLead) {\n  throw new Error('Lead not found');\n}\n\nconst currentFields = existingLead.fields;\nconst extractedData = messageData;\n\n// Update conversation history\nconst currentConversation = JSON.parse(currentFields.WhatsAppLastConversation || '[]');\nconst newEntry = {\n  timestamp: messageData.timestamp,\n  from: 'lead',\n  message: messageData.message,\n  extractedData: extractedData\n};\ncurrentConversation.push(newEntry);\n\n// Keep last 20 messages\nif (currentConversation.length > 20) {\n  currentConversation.splice(0, currentConversation.length - 20);\n}\n\n// Prepare updates\nconst updates = {\n  WhatsAppLastConversation: JSON.stringify(currentConversation),\n  WhatsAppRepliesAt: messageData.timestamp,\n  UpdatedAt: new Date().toISOString()\n};\n\nlet enrichmentMade = false;\nlet shouldAskForData = false;\n\n// Interest detection - trigger data collection\nif (extractedData.isInterested && !currentFields.InterestDetected) {\n  updates.InterestDetected = true;\n  updates.WhatsAppScore = extractedData.interestScore;\n  shouldAskForData = true; // Conditional data collection\n}\n\n// Update name if provided\nif (extractedData.name && (!currentFields.Name || currentFields.Name === '')) {\n  updates.Name = extractedData.name;\n  enrichmentMade = true;\n}\n\n// Update email if provided (and no typo)\nif (extractedData.email && !extractedData.hasTypo && (!currentFields.Email || currentFields.Email === '')) {\n  updates.Email = extractedData.email;\n  enrichmentMade = true;\n}\n\n// Recalculate data completeness\nif (enrichmentMade) {\n  const phone = currentFields.Phone ? 33 : 0;\n  const name = (updates.Name || currentFields.Name) ? 33 : 0;\n  const email = (updates.Email || currentFields.Email) ? 34 : 0;\n  updates.DataCompleteness = phone + name + email;\n}\n\n// AI context for response generation\nconst aiContext = {\n  leadData: {\n    name: updates.Name || currentFields.Name || '',\n    email: updates.Email || currentFields.Email || '',\n    phone: currentFields.Phone,\n    dataCompleteness: updates.DataCompleteness || currentFields.DataCompleteness || 33,\n    interests: extractedData.interests,\n    interestDetected: updates.InterestDetected || currentFields.InterestDetected || false,\n    interestScore: updates.WhatsAppScore || currentFields.WhatsAppScore || 0\n  },\n  conversationHistory: currentConversation.slice(-5),\n  currentMessage: messageData.message,\n  shouldAskForData: shouldAskForData,\n  hasEmailTypo: extractedData.hasTypo,\n  suggestedEmail: extractedData.suggestedEmail,\n  enrichmentMade: enrichmentMade\n};\n\nreturn {\n  leadId: existingLead.id,\n  updates: updates,\n  aiContext: aiContext\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-200, 200],
      "id": "analyze-conversation",
      "name": "Analyze Conversation"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "={{ $vars.AIRTABLE_BASE_ID }}",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "={{ $vars.AIRTABLE_LEADS_TABLE_ID }}",
          "mode": "id"
        },
        "id": "={{ $json.leadId }}",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Name": "={{ $json.updates.Name }}",
            "Email": "={{ $json.updates.Email }}",
            "WhatsAppLastConversation": "={{ $json.updates.WhatsAppLastConversation }}",
            "WhatsAppRepliesAt": "={{ $json.updates.WhatsAppRepliesAt }}",
            "UpdatedAt": "={{ $json.updates.UpdatedAt }}",
            "InterestDetected": "={{ $json.updates.InterestDetected }}",
            "WhatsAppScore": "={{ $json.updates.WhatsAppScore }}",
            "DataCompleteness": "={{ $json.updates.DataCompleteness }}"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [0, 200],
      "id": "update-lead-data",
      "name": "Update Lead Data",
      "credentials": {
        "airtableTokenApi": {
          "id": "airtable-token",
          "name": "ATC Airtable Token"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "jsCode": "// Generate AI response based on context and interest\nconst conversationData = $('Update Lead Data').first().json;\nconst aiContext = conversationData.aiContext;\n\nlet response = '';\n\n// Handle email typo correction\nif (aiContext.hasEmailTypo && aiContext.suggestedEmail) {\n  response = `Thanks! I noticed your email might have a typo - did you mean ${aiContext.suggestedEmail}?`;\n} \n// Conditional data collection (only when interest detected)\nelse if (aiContext.shouldAskForData) {\n  response = `Great to see your interest in aviation training! 🛩️\\n\\nI'd love to send you detailed information about our CPL, PPL, and ATPL programs. Can I get your name and email address to share the course details?`;\n} \n// Provide aviation training information\nelse if (aiContext.leadData.interestDetected) {\n  response = `Excellent! Our aviation programs include:\\n\\n✈️ CPL: 18 months, ₹25-30 lakhs\\n✈️ PPL: 6 months, ₹8-12 lakhs\\n✈️ ATPL: Advanced airline pilot training\\n\\nWhich program interests you most?`;\n} \n// General response\nelse {\n  response = `Thanks for your message! We offer comprehensive pilot training programs at ATC. Are you interested in learning about becoming a pilot?`;\n}\n\n// Check for hot lead (high interest + specific questions)\nconst isHotLead = aiContext.leadData.interestScore >= 80 || \n  aiContext.currentMessage.toLowerCase().includes('cost') ||\n  aiContext.currentMessage.toLowerCase().includes('when can i start');\n\nif (isHotLead) {\n  response += `\\n\\nI can see you're serious about starting your aviation career! Our counselor will call you within 2 hours to discuss everything in detail. 🔥`;\n}\n\nreturn {\n  response,\n  leadData: aiContext.leadData,\n  isHotLead,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 200],
      "id": "generate-ai-response",
      "name": "Generate AI Response"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-hot-lead",
              "leftValue": "={{ $json.isHotLead }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [400, 200],
      "id": "check-hot-lead",
      "name": "Check Hot Lead"
    },
    {
      "parameters": {
        "jsCode": "// Mock WhatsApp send (replace with actual AiSensy API)\nconst responseData = $('Generate AI Response').first().json;\n\nconsole.log(`Sending to ${responseData.leadData.phone}: ${responseData.response}`);\n\nreturn {\n  success: true,\n  messageId: 'mock_' + Date.now(),\n  response: responseData.response,\n  phone: responseData.leadData.phone,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 200],
      "id": "send-ai-response",
      "name": "Send AI Response (Mock)"
    },
    {
      "parameters": {
        "jsCode": "// Process hot lead - update status and prepare callback\nconst responseData = $('Generate AI Response').first().json;\n\nreturn {\n  leadPhone: responseData.leadData.phone,\n  interestScore: responseData.leadData.interestScore,\n  hotLeadMessage: `Thanks for your interest! 🔥\\n\\nBased on your questions, I can see you're serious about aviation training. Our senior counselor will call you within 2 hours to discuss your training options in detail.\\n\\nFeel free to ask any other questions!`,\n  shouldUpdateStatus: true,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 100],
      "id": "process-hot-lead",
      "name": "Process Hot Lead"
    }
  ],
  "connections": {
    "WhatsApp Inbound Webhook": {
      "main": [
        [
          {
            "node": "Parse Inbound Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Outreach (9am IST)": {
      "main": [
        [
          {
            "node": "Get Incomplete Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Inbound Message": {
      "main": [
        [
          {
            "node": "Find Existing Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Incomplete Leads": {
      "main": [
        [
          {
            "node": "Send Initial Outreach",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Existing Lead": {
      "main": [
        [
          {
            "node": "Check Lead Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Lead Exists": {
      "main": [
        [
          {
            "node": "Analyze Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Conversation": {
      "main": [
        [
          {
            "node": "Update Lead Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead Data": {
      "main": [
        [
          {
            "node": "Generate AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Response": {
      "main": [
        [
          {
            "node": "Check Hot Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Hot Lead": {
      "main": [
        [
          {
            "node": "Process Hot Lead",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send AI Response (Mock)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "atc-whatsapp-ai-cloud",
      "name": "ATC WhatsApp AI Cloud"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}