/**\n * Service Status Badge Component\n * \n * Compact service status indicator for dashboard headers and navigation.\n * Shows overall health with quick access to detailed status information.\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { authManager } from '@/lib/analytics/AuthenticationManager';\n\ninterface ServiceStatusBadgeProps {\n  className?: string;\n  showLabel?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  onClick?: () => void;\n}\n\ninterface OverallStatus {\n  status: 'healthy' | 'degraded' | 'error' | 'unknown';\n  connectedCount: number;\n  totalCount: number;\n  lastUpdate: Date;\n}\n\nexport function ServiceStatusBadge({\n  className = '',\n  showLabel = true,\n  size = 'md',\n  onClick\n}: ServiceStatusBadgeProps) {\n  const [overallStatus, setOverallStatus] = useState<OverallStatus>({\n    status: 'unknown',\n    connectedCount: 0,\n    totalCount: 0,\n    lastUpdate: new Date()\n  });\n  const [loading, setLoading] = useState(true);\n\n  // Fetch service statuses\n  const fetchStatus = async () => {\n    try {\n      const statuses = await authManager.getServiceStatus();\n      const connectedCount = statuses.filter(s => s.status === 'connected').length;\n      const totalCount = statuses.length;\n      \n      let status: OverallStatus['status'] = 'unknown';\n      if (totalCount === 0) {\n        status = 'unknown';\n      } else if (connectedCount === totalCount) {\n        status = 'healthy';\n      } else if (connectedCount > 0) {\n        status = 'degraded';\n      } else {\n        status = 'error';\n      }\n\n      setOverallStatus({\n        status,\n        connectedCount,\n        totalCount,\n        lastUpdate: new Date()\n      });\n    } catch (error) {\n      console.error('Failed to fetch service status:', error);\n      setOverallStatus(prev => ({ ...prev, status: 'error' }));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchStatus();\n    \n    // Refresh every 60 seconds\n    const interval = setInterval(fetchStatus, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Get size classes\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'sm':\n        return {\n          container: 'px-2 py-1 text-xs',\n          dot: 'w-2 h-2',\n          icon: 'w-3 h-3'\n        };\n      case 'lg':\n        return {\n          container: 'px-4 py-2 text-base',\n          dot: 'w-3 h-3',\n          icon: 'w-5 h-5'\n        };\n      default: // md\n        return {\n          container: 'px-3 py-1.5 text-sm',\n          dot: 'w-2.5 h-2.5',\n          icon: 'w-4 h-4'\n        };\n    }\n  };\n\n  // Get status color and styling\n  const getStatusStyling = () => {\n    switch (overallStatus.status) {\n      case 'healthy':\n        return {\n          bg: 'bg-green-50 hover:bg-green-100',\n          border: 'border-green-200',\n          text: 'text-green-700',\n          dot: 'bg-green-500'\n        };\n      case 'degraded':\n        return {\n          bg: 'bg-yellow-50 hover:bg-yellow-100',\n          border: 'border-yellow-200',\n          text: 'text-yellow-700',\n          dot: 'bg-yellow-500'\n        };\n      case 'error':\n        return {\n          bg: 'bg-red-50 hover:bg-red-100',\n          border: 'border-red-200',\n          text: 'text-red-700',\n          dot: 'bg-red-500'\n        };\n      default:\n        return {\n          bg: 'bg-gray-50 hover:bg-gray-100',\n          border: 'border-gray-200',\n          text: 'text-gray-700',\n          dot: 'bg-gray-400'\n        };\n    }\n  };\n\n  // Get status text\n  const getStatusText = () => {\n    if (loading) return 'Checking...';\n    \n    switch (overallStatus.status) {\n      case 'healthy':\n        return 'All Services Online';\n      case 'degraded':\n        return `${overallStatus.connectedCount}/${overallStatus.totalCount} Services`;\n      case 'error':\n        return 'Services Offline';\n      default:\n        return 'Status Unknown';\n    }\n  };\n\n  // Get tooltip text\n  const getTooltipText = () => {\n    if (loading) return 'Checking service status...';\n    \n    const { status, connectedCount, totalCount, lastUpdate } = overallStatus;\n    const timeAgo = formatRelativeTime(lastUpdate);\n    \n    switch (status) {\n      case 'healthy':\n        return `All ${totalCount} analytics services are connected. Last checked ${timeAgo}.`;\n      case 'degraded':\n        return `${connectedCount} of ${totalCount} analytics services are connected. Some features may be limited. Last checked ${timeAgo}.`;\n      case 'error':\n        return `Analytics services are offline. Data collection may be affected. Last checked ${timeAgo}.`;\n      default:\n        return `Unable to determine service status. Last checked ${timeAgo}.`;\n    }\n  };\n\n  const sizeClasses = getSizeClasses();\n  const styling = getStatusStyling();\n\n  return (\n    <div className={`relative group ${className}`}>\n      <button\n        onClick={onClick}\n        disabled={loading}\n        className={`\n          inline-flex items-center space-x-2 rounded-full border transition-colors\n          ${sizeClasses.container}\n          ${styling.bg}\n          ${styling.border}\n          ${styling.text}\n          ${onClick ? 'cursor-pointer' : 'cursor-default'}\n          ${loading ? 'opacity-50' : ''}\n          disabled:cursor-not-allowed\n        `}\n        title={getTooltipText()}\n      >\n        {/* Status Indicator */}\n        <div className=\"flex items-center space-x-1.5\">\n          {loading ? (\n            <div className={`${sizeClasses.dot} ${styling.dot} rounded-full animate-pulse`} />\n          ) : (\n            <div className={`${sizeClasses.dot} ${styling.dot} rounded-full`} />\n          )}\n          \n          {showLabel && (\n            <span className=\"font-medium whitespace-nowrap\">\n              {getStatusText()}\n            </span>\n          )}\n        </div>\n\n        {/* Chevron for clickable badges */}\n        {onClick && (\n          <svg \n            className={`${sizeClasses.icon} opacity-60`}\n            fill=\"none\" \n            stroke=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        )}\n      </button>\n\n      {/* Tooltip */}\n      <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50\">\n        {getTooltipText()}\n        <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900\"></div>\n      </div>\n    </div>\n  );\n}\n\n// Helper function\nfunction formatRelativeTime(date: Date): string {\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n  const diffMins = Math.floor(diffMs / 60000);\n  \n  if (diffMins < 1) return 'just now';\n  if (diffMins < 60) return `${diffMins}m ago`;\n  \n  const diffHours = Math.floor(diffMins / 60);\n  if (diffHours < 24) return `${diffHours}h ago`;\n  \n  const diffDays = Math.floor(diffHours / 24);\n  return `${diffDays}d ago`;\n}"