/**\n * Service Status Indicator Component\n * \n * Displays authentication status for each analytics API with visual indicators\n * for connected, error, and disabled states. Includes detailed error information\n * and setup guidance.\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { setupValidationService } from '@/lib/analytics/SetupValidationService';\nimport { setupGuidanceSystem } from '@/lib/analytics/SetupGuidanceSystem';\nimport { authManager } from '@/lib/analytics/AuthenticationManager';\n\ninterface ServiceStatus {\n  service: string;\n  status: 'connected' | 'error' | 'degraded' | 'not_configured';\n  lastChecked: Date;\n  error?: string;\n  score?: number;\n}\n\ninterface ServiceStatusIndicatorProps {\n  className?: string;\n  showDetails?: boolean;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n}\n\nexport function ServiceStatusIndicator({\n  className = '',\n  showDetails = true,\n  autoRefresh = true,\n  refreshInterval = 30000 // 30 seconds\n}: ServiceStatusIndicatorProps) {\n  const [statuses, setStatuses] = useState<ServiceStatus[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n  const [expandedService, setExpandedService] = useState<string | null>(null);\n  const [setupGuidance, setSetupGuidance] = useState<any>(null);\n\n  // Fetch service statuses\n  const fetchStatuses = async () => {\n    try {\n      const authStatuses = await authManager.getServiceStatus();\n      const validation = await setupValidationService.validateSetup();\n      \n      const combinedStatuses: ServiceStatus[] = authStatuses.map(authStatus => {\n        const serviceName = normalizeServiceName(authStatus.service);\n        const serviceValidation = validation.serviceStatuses[serviceName as keyof typeof validation.serviceStatuses];\n        \n        let status: ServiceStatus['status'] = 'not_configured';\n        if (authStatus.status === 'connected' && serviceValidation === 'configured') {\n          status = 'connected';\n        } else if (authStatus.status === 'error') {\n          status = 'error';\n        } else if (serviceValidation === 'partial') {\n          status = 'degraded';\n        }\n\n        return {\n          service: authStatus.service,\n          status,\n          lastChecked: authStatus.lastChecked || new Date(),\n          error: authStatus.error,\n          score: getServiceScore(serviceValidation)\n        };\n      });\n\n      setStatuses(combinedStatuses);\n      setLastUpdate(new Date());\n      \n      // Get setup guidance if there are issues\n      const issues = validation.issues.filter(i => i.severity === 'error' || i.severity === 'warning');\n      if (issues.length > 0) {\n        const guidance = await setupGuidanceSystem.getSetupGuidance(issues);\n        setSetupGuidance(guidance);\n      }\n      \n    } catch (error) {\n      console.error('Failed to fetch service statuses:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto-refresh effect\n  useEffect(() => {\n    fetchStatuses();\n    \n    if (autoRefresh) {\n      const interval = setInterval(fetchStatuses, refreshInterval);\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh, refreshInterval]);\n\n  // Manual refresh\n  const handleRefresh = () => {\n    setLoading(true);\n    fetchStatuses();\n  };\n\n  // Toggle service details\n  const toggleServiceDetails = (service: string) => {\n    setExpandedService(expandedService === service ? null : service);\n  };\n\n  // Get status color\n  const getStatusColor = (status: ServiceStatus['status']) => {\n    switch (status) {\n      case 'connected':\n        return 'text-green-600 bg-green-50 border-green-200';\n      case 'error':\n        return 'text-red-600 bg-red-50 border-red-200';\n      case 'degraded':\n        return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'not_configured':\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n      default:\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  // Get status icon\n  const getStatusIcon = (status: ServiceStatus['status']) => {\n    switch (status) {\n      case 'connected':\n        return (\n          <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'error':\n        return (\n          <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'degraded':\n        return (\n          <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'not_configured':\n        return (\n          <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      default:\n        return null;\n    }\n  };\n\n  // Get status text\n  const getStatusText = (status: ServiceStatus['status']) => {\n    switch (status) {\n      case 'connected':\n        return 'Connected';\n      case 'error':\n        return 'Error';\n      case 'degraded':\n        return 'Degraded';\n      case 'not_configured':\n        return 'Not Configured';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  if (loading && statuses.length === 0) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 p-4 ${className}`}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"flex items-center space-x-3\">\n                <div className=\"w-4 h-4 bg-gray-200 rounded\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-1/3\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>\n      {/* Header */}\n      <div className=\"px-4 py-3 border-b border-gray-200 flex items-center justify-between\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Service Status</h3>\n        <div className=\"flex items-center space-x-2\">\n          {lastUpdate && (\n            <span className=\"text-xs text-gray-500\">\n              Updated {lastUpdate.toLocaleTimeString()}\n            </span>\n          )}\n          <button\n            onClick={handleRefresh}\n            disabled={loading}\n            className=\"p-1 text-gray-400 hover:text-gray-600 disabled:opacity-50\"\n            title=\"Refresh status\"\n          >\n            <svg \n              className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      {/* Service List */}\n      <div className=\"p-4\">\n        <div className=\"space-y-3\">\n          {statuses.map((serviceStatus) => (\n            <div key={serviceStatus.service} className=\"border border-gray-200 rounded-lg\">\n              {/* Service Header */}\n              <div \n                className={`p-3 border rounded-lg cursor-pointer transition-colors hover:bg-gray-50 ${\n                  getStatusColor(serviceStatus.status)\n                }`}\n                onClick={() => showDetails && toggleServiceDetails(serviceStatus.service)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getStatusIcon(serviceStatus.status)}\n                    <div>\n                      <div className=\"font-medium text-sm\">\n                        {getServiceDisplayName(serviceStatus.service)}\n                      </div>\n                      <div className=\"text-xs opacity-75\">\n                        {getStatusText(serviceStatus.status)}\n                        {serviceStatus.score !== undefined && (\n                          <span className=\"ml-2\">({serviceStatus.score}% configured)</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    {serviceStatus.lastChecked && (\n                      <span className=\"text-xs opacity-75\">\n                        {formatRelativeTime(serviceStatus.lastChecked)}\n                      </span>\n                    )}\n                    {showDetails && (\n                      <svg \n                        className={`w-4 h-4 transition-transform ${\n                          expandedService === serviceStatus.service ? 'rotate-180' : ''\n                        }`}\n                        fill=\"none\" \n                        stroke=\"currentColor\" \n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                      </svg>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Expanded Details */}\n              {showDetails && expandedService === serviceStatus.service && (\n                <div className=\"px-3 pb-3\">\n                  <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                    {serviceStatus.error && (\n                      <div className=\"mb-3\">\n                        <div className=\"text-sm font-medium text-red-600 mb-1\">Error Details:</div>\n                        <div className=\"text-sm text-red-700 bg-red-50 p-2 rounded\">\n                          {serviceStatus.error}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Setup Guidance */}\n                    {setupGuidance && (\n                      <div className=\"mb-3\">\n                        <div className=\"text-sm font-medium text-gray-700 mb-2\">Quick Actions:</div>\n                        <div className=\"space-y-2\">\n                          {setupGuidance.nextActions\n                            .filter((action: any) => action.guide === normalizeServiceName(serviceStatus.service))\n                            .slice(0, 2)\n                            .map((action: any, index: number) => (\n                            <div key={index} className=\"flex items-start space-x-2 text-sm\">\n                              <div className=\"w-4 h-4 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center text-xs font-medium mt-0.5\">\n                                {index + 1}\n                              </div>\n                              <div>\n                                <div className=\"font-medium text-gray-900\">{action.action}</div>\n                                <div className=\"text-gray-600 text-xs\">{action.description}</div>\n                                <div className=\"text-gray-500 text-xs\">Est. {action.estimatedTime}</div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Service-specific information */}\n                    <div className=\"text-xs text-gray-500\">\n                      <div>Last checked: {serviceStatus.lastChecked.toLocaleString()}</div>\n                      {serviceStatus.score !== undefined && (\n                        <div>Configuration score: {serviceStatus.score}%</div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Overall Status Summary */}\n        {statuses.length > 0 && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"text-gray-600\">\n                {statuses.filter(s => s.status === 'connected').length} of {statuses.length} services connected\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-xs text-gray-600\">Connected</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                  <span className=\"text-xs text-gray-600\">Degraded</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                  <span className=\"text-xs text-gray-600\">Error</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                  <span className=\"text-xs text-gray-600\">Not Configured</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Helper functions\nfunction normalizeServiceName(service: string): string {\n  const mapping: Record<string, string> = {\n    'Google Analytics 4': 'ga4',\n    'Firebase Analytics': 'firebase',\n    'Google Search Console': 'searchConsole'\n  };\n  return mapping[service] || service.toLowerCase().replace(/\\s+/g, '');\n}\n\nfunction getServiceDisplayName(service: string): string {\n  return service;\n}\n\nfunction getServiceScore(status: string): number {\n  switch (status) {\n    case 'configured': return 100;\n    case 'partial': return 60;\n    case 'not_configured': return 0;\n    case 'error': return 25;\n    default: return 0;\n  }\n}\n\nfunction formatRelativeTime(date: Date): string {\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n  const diffMins = Math.floor(diffMs / 60000);\n  \n  if (diffMins < 1) return 'just now';\n  if (diffMins < 60) return `${diffMins}m ago`;\n  \n  const diffHours = Math.floor(diffMins / 60);\n  if (diffHours < 24) return `${diffHours}h ago`;\n  \n  const diffDays = Math.floor(diffHours / 24);\n  return `${diffDays}d ago`;\n}"