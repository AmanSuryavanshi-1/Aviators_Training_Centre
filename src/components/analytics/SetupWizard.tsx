/**\n * Analytics Setup Wizard Component\n * \n * Guides users through the analytics services setup process with\n * step-by-step instructions and real-time validation.\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { setupValidationService, ValidationIssue } from '@/lib/analytics/SetupValidationService';\nimport { setupGuidanceSystem, SetupGuide, SetupStep } from '@/lib/analytics/SetupGuidanceSystem';\n\ninterface SetupWizardProps {\n  className?: string;\n  onComplete?: () => void;\n  onClose?: () => void;\n  initialService?: 'ga4' | 'firebase' | 'search-console';\n}\n\ninterface WizardState {\n  currentService: 'ga4' | 'firebase' | 'search-console' | null;\n  currentStep: number;\n  completedSteps: Set<string>;\n  validationResults: any;\n  loading: boolean;\n}\n\nexport function SetupWizard({\n  className = '',\n  onComplete,\n  onClose,\n  initialService\n}: SetupWizardProps) {\n  const [wizardState, setWizardState] = useState<WizardState>({\n    currentService: initialService || null,\n    currentStep: 0,\n    completedSteps: new Set(),\n    validationResults: null,\n    loading: true\n  });\n  \n  const [currentGuide, setCurrentGuide] = useState<SetupGuide | null>(null);\n  const [showInstructions, setShowInstructions] = useState<Record<string, boolean>>({});\n\n  // Load initial validation and guidance\n  useEffect(() => {\n    loadValidationResults();\n  }, []);\n\n  // Load guide when service changes\n  useEffect(() => {\n    if (wizardState.currentService) {\n      const guide = setupGuidanceSystem.getGuide(wizardState.currentService);\n      setCurrentGuide(guide);\n    }\n  }, [wizardState.currentService]);\n\n  const loadValidationResults = async () => {\n    try {\n      const results = await setupValidationService.validateSetup();\n      setWizardState(prev => ({\n        ...prev,\n        validationResults: results,\n        loading: false\n      }));\n    } catch (error) {\n      console.error('Failed to load validation results:', error);\n      setWizardState(prev => ({ ...prev, loading: false }));\n    }\n  };\n\n  const selectService = (service: 'ga4' | 'firebase' | 'search-console') => {\n    setWizardState(prev => ({\n      ...prev,\n      currentService: service,\n      currentStep: 0\n    }));\n  };\n\n  const nextStep = () => {\n    if (currentGuide && wizardState.currentStep < currentGuide.steps.length - 1) {\n      setWizardState(prev => ({\n        ...prev,\n        currentStep: prev.currentStep + 1\n      }));\n    }\n  };\n\n  const prevStep = () => {\n    if (wizardState.currentStep > 0) {\n      setWizardState(prev => ({\n        ...prev,\n        currentStep: prev.currentStep - 1\n      }));\n    }\n  };\n\n  const markStepCompleted = (stepId: string) => {\n    setWizardState(prev => ({\n      ...prev,\n      completedSteps: new Set([...prev.completedSteps, stepId])\n    }));\n  };\n\n  const toggleInstructions = (stepId: string) => {\n    setShowInstructions(prev => ({\n      ...prev,\n      [stepId]: !prev[stepId]\n    }));\n  };\n\n  const validateCurrentService = async () => {\n    if (!wizardState.currentService) return;\n    \n    try {\n      const result = await setupValidationService.validateService(wizardState.currentService);\n      \n      if (result.isValid) {\n        // Service is now configured\n        await loadValidationResults();\n        \n        if (onComplete) {\n          onComplete();\n        }\n      }\n    } catch (error) {\n      console.error('Validation failed:', error);\n    }\n  };\n\n  const getServiceStatus = (service: string) => {\n    if (!wizardState.validationResults) return 'unknown';\n    return wizardState.validationResults.serviceStatuses[service] || 'not_configured';\n  };\n\n  const getServiceIssues = (service: string) => {\n    if (!wizardState.validationResults) return [];\n    return wizardState.validationResults.issues.filter((issue: ValidationIssue) => \n      issue.category === service\n    );\n  };\n\n  if (wizardState.loading) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-4 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Service selection view\n  if (!wizardState.currentService) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Analytics Setup</h2>\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          )}\n        </div>\n\n        {/* Service Selection */}\n        <div className=\"p-6\">\n          <p className=\"text-gray-600 mb-6\">\n            Choose an analytics service to set up. You can configure multiple services.\n          </p>\n\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {[\n              {\n                id: 'ga4' as const,\n                name: 'Google Analytics 4',\n                description: 'Web analytics and user behavior tracking',\n                icon: '📊',\n                difficulty: 'Medium',\n                time: '30-45 min'\n              },\n              {\n                id: 'firebase' as const,\n                name: 'Firebase Analytics',\n                description: 'Real-time data storage and additional insights',\n                icon: '🔥',\n                difficulty: 'Medium',\n                time: '20-30 min'\n              },\n              {\n                id: 'search-console' as const,\n                name: 'Search Console',\n                description: 'SEO insights and search performance',\n                icon: '🔍',\n                difficulty: 'Medium',\n                time: '25-35 min'\n              }\n            ].map(service => {\n              const status = getServiceStatus(service.id);\n              const issues = getServiceIssues(service.id);\n              \n              return (\n                <div\n                  key={service.id}\n                  className={`border rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${\n                    status === 'configured' \n                      ? 'border-green-200 bg-green-50' \n                      : 'border-gray-200 hover:border-blue-300'\n                  }`}\n                  onClick={() => selectService(service.id)}\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"text-2xl\">{service.icon}</div>\n                    <div className=\"flex items-center space-x-1\">\n                      {status === 'configured' && (\n                        <svg className=\"w-5 h-5 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                      {issues.length > 0 && (\n                        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                          {issues.length} issue{issues.length > 1 ? 's' : ''}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <h3 className=\"font-semibold text-gray-900 mb-2\">{service.name}</h3>\n                  <p className=\"text-sm text-gray-600 mb-3\">{service.description}</p>\n                  \n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>Difficulty: {service.difficulty}</span>\n                    <span>Time: {service.time}</span>\n                  </div>\n                  \n                  {status === 'configured' && (\n                    <div className=\"mt-2 text-sm text-green-600 font-medium\">\n                      ✓ Configured\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Overall Progress */}\n          {wizardState.validationResults && (\n            <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Overall Progress</span>\n                <span className=\"text-sm text-gray-600\">\n                  {wizardState.validationResults.overallScore}% Complete\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${wizardState.validationResults.overallScore}%` }}\n                ></div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Step-by-step guide view\n  if (!currentGuide) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">Loading setup guide...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const currentStep = currentGuide.steps[wizardState.currentStep];\n  const isStepCompleted = wizardState.completedSteps.has(currentStep.id);\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setWizardState(prev => ({ ...prev, currentService: null }))}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">{currentGuide.title}</h2>\n              <p className=\"text-sm text-gray-600\">\n                Step {wizardState.currentStep + 1} of {currentGuide.steps.length}\n              </p>\n            </div>\n          </div>\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          )}\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-600\">Progress</span>\n            <span className=\"text-sm text-gray-600\">\n              {Math.round(((wizardState.currentStep + 1) / currentGuide.steps.length) * 100)}%\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${((wizardState.currentStep + 1) / currentGuide.steps.length) * 100}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n\n      {/* Step Content */}\n      <div className=\"p-6\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-start space-x-3 mb-4\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n              isStepCompleted \n                ? 'bg-green-100 text-green-600' \n                : 'bg-blue-100 text-blue-600'\n            }`}>\n              {isStepCompleted ? (\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                </svg>\n              ) : (\n                wizardState.currentStep + 1\n              )}\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{currentStep.title}</h3>\n              <p className=\"text-gray-600 mb-3\">{currentStep.description}</p>\n              \n              <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                <span>⏱️ {currentStep.estimatedTime}</span>\n                <span>📊 {currentStep.difficulty}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Prerequisites */}\n          {currentStep.prerequisites && currentStep.prerequisites.length > 0 && (\n            <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"text-sm font-medium text-yellow-800 mb-1\">Prerequisites:</div>\n              <ul className=\"text-sm text-yellow-700 list-disc list-inside\">\n                {currentStep.prerequisites.map((prereq, index) => (\n                  <li key={index}>{prereq}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Detailed Instructions */}\n          <div className=\"mb-4\">\n            <button\n              onClick={() => toggleInstructions(currentStep.id)}\n              className=\"flex items-center space-x-2 text-blue-600 hover:text-blue-700 font-medium\"\n            >\n              <span>View Detailed Instructions</span>\n              <svg \n                className={`w-4 h-4 transition-transform ${\n                  showInstructions[currentStep.id] ? 'rotate-180' : ''\n                }`}\n                fill=\"none\" \n                stroke=\"currentColor\" \n                viewBox=\"0 0 24 24\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            </button>\n            \n            {showInstructions[currentStep.id] && (\n              <div className=\"mt-3 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"prose prose-sm max-w-none\">\n                  <p className=\"font-medium text-gray-900 mb-2\">Action Required:</p>\n                  <p className=\"text-gray-700 mb-4\">{currentStep.action}</p>\n                  \n                  {currentStep.resources.documentation && (\n                    <div className=\"mb-3\">\n                      <p className=\"font-medium text-gray-900 mb-1\">Documentation:</p>\n                      <a \n                        href={currentStep.resources.documentation}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:text-blue-700 underline\"\n                      >\n                        View Official Documentation →\n                      </a>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded\">\n                    <p className=\"font-medium text-blue-900 mb-1\">Verification:</p>\n                    <p className=\"text-blue-800 text-sm\">{currentStep.verification.description}</p>\n                    {currentStep.verification.expectedResult && (\n                      <p className=\"text-blue-700 text-sm mt-1\">\n                        Expected: {currentStep.verification.expectedResult}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Step Completion */}\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => markStepCompleted(currentStep.id)}\n              disabled={isStepCompleted}\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                isStepCompleted\n                  ? 'bg-green-100 text-green-700 cursor-not-allowed'\n                  : 'bg-blue-600 text-white hover:bg-blue-700'\n              }`}\n            >\n              {isStepCompleted ? '✓ Completed' : 'Mark as Complete'}\n            </button>\n            \n            <button\n              onClick={validateCurrentService}\n              className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium\"\n            >\n              Test Configuration\n            </button>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <div className=\"flex items-center justify-between pt-6 border-t border-gray-200\">\n          <button\n            onClick={prevStep}\n            disabled={wizardState.currentStep === 0}\n            className=\"flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n            </svg>\n            <span>Previous</span>\n          </button>\n          \n          <div className=\"text-sm text-gray-500\">\n            Step {wizardState.currentStep + 1} of {currentGuide.steps.length}\n          </div>\n          \n          <button\n            onClick={nextStep}\n            disabled={wizardState.currentStep === currentGuide.steps.length - 1}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <span>Next</span>\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}"